#!
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkCustomInboxAsync = exports.checkCustomInbox = exports.checkInboxAsync = exports.checkInbox = exports.createInboxAsync = exports.createInbox = exports.Email = exports.Inbox = void 0;
const tslib_1 = require("tslib");
const node_fetch_1 = tslib_1.__importDefault(require("node-fetch"));
const Inbox_1 = tslib_1.__importDefault(require("./Inbox"));
exports.Inbox = Inbox_1.default;
const Email_1 = tslib_1.__importDefault(require("./Email"));
exports.Email = Email_1.default;
const BASE_URL = "https://api.tempmail.lol";
/**
 * Create a new Inbox.
 * @param cb {function} Callback function.
 * @param rush {boolean} (optional) Enable Rush Mode (see https://tempmail.lol/news/2022/08/03/introducing-rush-mode-for-tempmail/).
 * @param domain {string} (optional) use a specific domain from the website.
 *
 * @throws {Error} if the custom domain does not exist or `rush` and `domain` are present.
 */
function createInbox(cb, rush = false, domain = undefined) {
    if (rush && domain !== undefined) {
        throw new Error("You cannot specify both a custom domain and rush mode.");
    }
    let url = `${BASE_URL}/generate`;
    if (rush) {
        url += "/rush";
    }
    else if (domain !== undefined) {
        url += `/${domain}`;
    }
    (0, node_fetch_1.default)(url).then(res => res.json()).then((json) => {
        const inbox = new Inbox_1.default(json.address, json.token);
        if (json.error) {
            cb(undefined, new Error(json.error));
        }
        cb(inbox, null);
    }).catch((err) => {
        cb(undefined, err);
    });
}
exports.createInbox = createInbox;
/**
 * Create a new Inbox asynchronously.
 *
 * @param rush {boolean} (optional) Enable Rush Mode (see https://tempmail.lol/news/2022/08/03/introducing-rush-mode-for-tempmail/).
 * @param domain {string} (optional) use a specific domain from the website.
 * @returns {Promise<Inbox>} Promise with the Inbox.
 * @throws {Error} if the custom domain does not exist or `rush` and `domain` are present.
 */
async function createInboxAsync(rush = false, domain = undefined) {
    if (rush && domain !== undefined) {
        throw new Error("You cannot specify both a custom domain and rush mode.");
    }
    let url = `${BASE_URL}/generate`;
    if (rush) {
        url += "/rush";
    }
    else if (domain !== undefined) {
        url += `/${domain}`;
    }
    const res = await (0, node_fetch_1.default)(url);
    const json = await res.json();
    if (json.error)
        throw new Error(json.error);
    return new Inbox_1.default(json.address, json.token);
}
exports.createInboxAsync = createInboxAsync;
/**
 * Check for new emails on an Inbox.
 * @param inbox {Inbox | string} Inbox or token string to check.
 * @param cb {function} Callback function.
 */
function checkInbox(inbox, cb) {
    //convert the token to an Inbox
    if (typeof inbox === "string") {
        inbox = new Inbox_1.default("", inbox);
    }
    (0, node_fetch_1.default)(`${BASE_URL}/auth/${inbox.token}`).then(res => res.json()).then(json => {
        if (json.token === "invalid") {
            cb([], new Error("Invalid token"));
        }
        if (json.email === null) {
            return cb([], null);
        }
        const emails = json.email.map((email) => new Email_1.default(email.from, email.to, email.subject, email.body, email.html, email.date, email.ip));
        cb(emails, null);
    });
}
exports.checkInbox = checkInbox;
/**
 * Check for new emails on an Inbox asynchronously.
 *
 * @param inbox {Inbox | string} Inbox or token string to check.
 * @returns {Promise<Email[]>} Promise with the emails.
 * @throws {Error} If the token is invalid.
 */
async function checkInboxAsync(inbox) {
    //convert the token to an Inbox
    if (typeof inbox === "string") {
        inbox = new Inbox_1.default("", inbox);
    }
    const res = await (0, node_fetch_1.default)(`${BASE_URL}/auth/${inbox.token}`);
    const json = await res.json();
    if (json.token === "invalid") {
        throw new Error("Invalid token");
    }
    if (json.email === null) {
        return [];
    }
    return json.email.map((email) => new Email_1.default(email.from, email.to, email.subject, email.body, email.html, email.date, email.ip));
}
exports.checkInboxAsync = checkInboxAsync;
/**
 * Check a custom inbox.
 *
 * NOTE: this method will not return anything indicating if the token is invalid.
 *
 * @param domain {string} Domain to check.
 * @param key {string} The key for the domain generated by the website.
 * @param cb {function} Callback function.
 */
function checkCustomInbox(domain, key, cb) {
    (0, node_fetch_1.default)(`${BASE_URL}/custom/${key}/${domain}`).then(res => res.json()).then(json => {
        const emails = json.email.map((email) => new Email_1.default(email.from, email.to, email.subject, email.body, email.html, email.date, email.ip));
        cb(emails);
    });
}
exports.checkCustomInbox = checkCustomInbox;
/**
 * Check a custom inbox asynchronously.
 *
 * NOTE: this method will not return anything indicating if the token is invalid.
 *
 * @param domain {string} Domain to check.
 * @param key {string} The key for the domain generated by the website.
 *
 * @returns {Promise<Email[]>} Promise with the emails.
 */
async function checkCustomInboxAsync(domain, key) {
    const res = await (0, node_fetch_1.default)(`${BASE_URL}/custom/${key}/${domain}`);
    const json = await res.json();
    return json.email.map((email) => new Email_1.default(email.from, email.to, email.subject, email.body, email.html, email.date, email.ip));
}
exports.checkCustomInboxAsync = checkCustomInboxAsync;
